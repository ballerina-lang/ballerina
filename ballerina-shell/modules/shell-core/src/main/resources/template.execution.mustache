{{#imports }}
    {{{.}}}
{{/imports}}

handle context_id = java:fromString("{{contextId}}");

// Java methods: Memory
function recall(handle context_id, handle name) returns any|error = @java:Method {
    'class: "{{{memoryRef}}}"
} external;
function memorize(handle context_id, handle name, any|error value) = @java:Method {
    'class: "{{{memoryRef}}}"
} external;

// Java Methods: IO utilities
function println(any|error... values) = @java:Method {
    'class: "{{{memoryRef}}}"
} external;
function sprintfh(handle template, any|error... values) returns handle = @java:Method {
    name: "sprintf",
    'class: "{{{memoryRef}}}"
} external;

// Helper methods
function recall_h(string name) returns any|error {
    return trap recall(context_id, java:fromString(name));
}
function memorize_h(string name, any|error value) {
    memorize(context_id, java:fromString(name), value);
}
function sprintf(string template, any|error... values) returns string {
    handle out = sprintfh(java:fromString(template), ...values);
    return java:toString(out) ?: "";
}

// Module level declarations
{{#moduleDclns }}
    {{{.}}}
{{/moduleDclns}}

// Variable declarations
{{#varDclns}}
    {{#isNew }}
        ({{{type}}})? {{{name}}} = (); // There is an issue with the name or type
    {{/isNew}}
    {{^isNew }}
        {{#isAny }}
            {{{type}}} {{{name}}} = <{{{type}}}> checkpanic recall_h("{{{encodedName}}}");
        {{/isAny}}
        {{^isAny }}
            {{{type}}} {{{name}}} = <{{{type}}}> recall_h("{{{encodedName}}}");
        {{/isAny}}
    {{/isNew}}
{{/varDclns}}

// Global expression variable (previous evaluation value)
any|error {{{exprVarName}}} = recall_h("{{{exprVarName}}}");

// This will execute the statement and initialize and save var dcln.
// The variable is declared in local context to enable various expressions.
public function run() {
    // Handle statements/expressions
    do {
        {{#lastStmt}}
            // Statement evaluation
            {{#statement}}
                if (true) {
                    {{{code}}}
                }
                {{{exprVarName}}} = ();
            {{/statement}}

            // Expression evaluation
            {{^statement}}
                {{{exprVarName}}} = (
                    {{{code}}}
                );
            {{/statement}}
        {{/lastStmt}}
    } on fail error e {
        println("Fail: ", e.message());
        {{{exprVarName}}} = ();
    }

    // Variable declaration
    {{{lastVarDcln}}}

    // Save variables
    memorize_h("{{{exprVarName}}}", {{{exprVarName}}});
    {{#varDclns}}
        memorize_h("{{{encodedName}}}", {{{name}}});
    {{/varDclns}}
}

public function main() returns error? {
    error? ret = trap run();
    if (ret is error) {
        println("Panic: ", ret.message());
        return ret;
    }
}
