import org.gradle.internal.os.OperatingSystem;

plugins {
    id 'base'
    id 'com.gradle.build-scan' version '2.1'
    id "com.github.spotbugs" version "1.6.10"
    id "com.dorongold.task-tree" version "1.3.1"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id 'maven-publish'
    id 'net.researchgate.release' version '2.6.0'
}

allprojects {
    group = project.group
    version = project.version

    task printPath {
        doLast{
            println projectDir
        }
    }
}

subprojects {
    apply plugin: 'maven-publish'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version = project.version
            }
        }
        repositories {
            maven {
                if(project.version.endsWith('-SNAPSHOT')) {
                    url "https://maven.wso2.org/nexus/content/repositories/snapshots/"
                } else {
                    url "https://maven.wso2.org/nexus/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username System.getenv("NEXUS_USERNAME")
                    password System.getenv("NEXUS_PASSWORD")
                }
            }
        }
    }

    release {
        // Disable check snapshots temporarily
        failOnSnapshotDependencies = false
        failOnCommitNeeded = false
        tagTemplate = 'v${version}'
        git {
            // To release from any branch
            requireBranch = null
        }
    }

    afterReleaseBuild.dependsOn publishToMavenLocal
    afterReleaseBuild.dependsOn publish
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

dependencies {
    constraints {
        //implementation 'org.springframework:spring-web:5.0.2.RELEASE'
    }
}

task init_Submodules {
	doLast{
		if (OperatingSystem.current().isLinux()){
			print("Hi, I worked!!")
			def c1 = ['sh', '-c', 'git submodule init'].execute()
			c1.waitFor()
			println(c1.text.trim())
			def c2=['sh', '-c', 'git submodule update'].execute()
			c2.waitFor()
			println(c2.text.trim())}
		else{
			println("Please manually initialize and update git submodules using \"git submodules init;git submodules update\"")}
	}
}

build.dependsOn init_Submodules
