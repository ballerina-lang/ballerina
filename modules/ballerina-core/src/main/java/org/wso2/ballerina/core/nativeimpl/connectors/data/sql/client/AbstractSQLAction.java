/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.ballerina.core.nativeimpl.connectors.data.sql.client;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.wso2.ballerina.core.exception.BallerinaException;
import org.wso2.ballerina.core.interpreter.Context;
import org.wso2.ballerina.core.model.Connector;
import org.wso2.ballerina.core.model.values.BDataframe;
import org.wso2.ballerina.core.model.values.BInteger;
import org.wso2.ballerina.core.nativeimpl.connectors.AbstractNativeAction;
import org.wso2.ballerina.core.nativeimpl.connectors.data.sql.SQLConnector;
import org.wso2.ballerina.core.nativeimpl.connectors.data.sql.SQLDataIterator;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * @code AbstractSQLAction} is the base class for all SQL Connector Action
 */
public abstract class AbstractSQLAction extends AbstractNativeAction {

    private static final Logger logger = LoggerFactory.getLogger(AbstractSQLAction.class);

    protected BDataframe executeQuery(Context context, Connector connector, String query) {

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = ((SQLConnector) connector).getSQLConnection();
            if (conn == null) {
                logger.error("Error in Connecting to the DB");
                return null;
            }

            stmt = conn.prepareStatement(query);
            rs = stmt.executeQuery();

            BDataframe dataframe = new BDataframe(new SQLDataIterator(conn, stmt, rs), 
                    new HashMap<>(), new ArrayList<>());
            context.getControlStack().setReturnValue(0, dataframe);
            return dataframe;
        } catch (SQLException e) {
            closeResources(rs, stmt, conn);
            throw new BallerinaException("Error in executing Query." + e.getMessage());
        }
    }

    protected BInteger executeUpdate(Context context, Connector connector, String query,
            boolean returnAutoGeneratedKeys) {

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = ((SQLConnector) connector).getSQLConnection();
            if (conn == null) {
                logger.error("Error in Connecting to the DB");
                return null;
            }

            if (returnAutoGeneratedKeys) {
                stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            } else {
                stmt = conn.prepareStatement(query);
            }

            int count = stmt.executeUpdate();
            BInteger updatedCount = new BInteger(count);
            context.getControlStack().setReturnValue(0, updatedCount);

            if (returnAutoGeneratedKeys) {
                rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    int generatedID = rs.getInt(1);
                    context.getControlStack().setReturnValue(1, new BInteger(generatedID)); //TODO:Check Array of keys
                }
            }
            closeResources(rs, stmt, conn);
            return updatedCount;
        } catch (SQLException e) {
            closeResources(rs, stmt, conn);
            throw new BallerinaException("Error in executing Update." + e.getMessage());
        }
    }

    protected BDataframe executeProcedure(Context context, Connector connector, String query) {

        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = ((SQLConnector) connector).getSQLConnection();
            if (conn == null) {
                logger.error("Error in Connecting to the DB");
                return null;
            }

            stmt = conn.prepareCall(query);
            boolean hasResult = stmt.execute();
            if (hasResult) {
                rs = stmt.getResultSet(); //TODO:How to return next result sets
                BDataframe dataframe = new BDataframe(new SQLDataIterator(conn, stmt, rs), new HashMap<>(),
                        new ArrayList<>());
                context.getControlStack().setReturnValue(0, dataframe);
                return dataframe;
            }
            return null;
        } catch (SQLException e) {
            closeResources(rs, stmt, conn);
            throw new BallerinaException("Error in executing Query." + e.getMessage());
        }
    }

    private void closeResources(ResultSet rs, Statement stmt, Connection conn) {
        try {
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException ex) {
            logger.error("SQL Error in Closing Result Set:", ex.getMessage());
        }
        try {
            if (stmt != null) {
                stmt.close();
            }
        } catch (SQLException ex) {
            logger.error("SQL Error in Closing Statement:", ex.getMessage());
        }
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException ex) {
            logger.error("SQL Error in Closing Connection:", ex.getMessage());
        }
    }
}
