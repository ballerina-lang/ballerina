public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Client client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "{{stubType}}", ROOT_DESCRIPTOR, getDescriptorMap());
    }
{{#blockingFunctions}}
    public remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}grpc:ClientContext? context = ()) returns ({{#if outputType}}[{{outputType}}, grpc:Headers]{{else}}grpc:Headers{{/if}}|grpc:Error) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        [anydata, grpc:Headers]|error payload;
        if context is grpc:ClientContext {
            payload = check self.grpcClient->blockingExecute("{{methodId}}", req, context.getContextHeaders());
        } else {
            payload = check self.grpcClient->blockingExecute("{{methodId}}", req, ());
        }
        {{#if outputType}}
        if payload is [anydata, grpc:Headers] { {{#not_equal outputType "string" }}
            return [<{{outputType}}>(payload[0]), payload[1]];
        {{/not_equal}}{{#equals outputType "string"}}return [payload[0].toString(), payload[1]];{{/equals}}{{else}}return [_, payload[1]];{{/if ~}}
        } else {
            return <grpc:Error>payload;
        }
    }
{{/blockingFunctions}}{{#nonBlockingFunctions}}
    public remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}service msgListener, grpc:ClientContext? context = ()) returns (grpc:Error?) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        if context is grpc:ClientContext {
            return self.grpcClient->nonBlockingExecute("{{methodId}}", req, msgListener, context.getContextHeaders());
        }
        return self.grpcClient->nonBlockingExecute("{{methodId}}", req, msgListener, ());
    }
{{/nonBlockingFunctions}}{{#streamingFunctions}}
    public remote function {{methodName}}(service msgListener, grpc:ClientContext? context = ()) returns (grpc:StreamingClient|grpc:Error) {
        if context is grpc:ClientContext {
            return self.grpcClient->streamingExecute("{{methodId}}", msgListener, context.getContextHeaders());
        }
        return self.grpcClient->streamingExecute("{{methodId}}", msgListener, ());
    }{{/streamingFunctions}}
};