import ballerina/grpc;
import ballerina/http;
import ballerina/lang.'int as intCaster;
import ballerina/lang.'float as floatCaster;
import ballerina/log;

{{#if streamingProxyAvailable}}final string STAGE = "STAGE";
final string INIT = "INIT";
final string REPLY = "REPLY";
final string CLIENT_STREAM = "CLIENT_STREAM";
final string CLIENT_EP = "CLIENT_EP";
final string MESSAGE = "MESSAGE";
final string FUNCTION = "FUNCTION";

{{/if}}listener http:Listener serviceListener = new(9091);

{{#if unaryProxyAvailable}}{{#stubList}}{{#equals stubType "blocking"}}{{serviceName}}BlockingClient {{serviceName}}BlockingEp = new("http://localhost:9090");
{{/equals}}{{/stubList}}{{/if}}
{{~#if streamingProxyAvailable}}{{#stubList}}{{#not_equal stubType "blocking"}}{{serviceName}}Client {{serviceName}}Ep = new("http://localhost:9090");
{{/not_equal}}{{/stubList}}{{/if}}
{{#stubList}}{{#if proxyAvailable}}{{#not_equal stubType "blocking"}}service {{serviceName}} on serviceListener {
{{#nonBlockingFunctions}}{{#if (checkStreamingType methodType "UNARY")}}{{>proxy_tools/proxy_unary service=../serviceName}}
{{/if}}{{/nonBlockingFunctions}}{{#each (getAllStreamingFunctions this)}}{{>proxy_tools/proxy_streaming service=../serviceName}}{{/each}}{{#literal "}"}}{{/literal}}
{{/not_equal}}{{/if}}{{/stubList}}
{{#if streamingProxyAvailable}}{{>proxy_tools/streaming_invoker}}

{{>proxy_tools/streaming_tools}}

{{/if}}{{#if unaryProxyAvailable}}{{>proxy_tools/unary_tools}}

{{/if}}{{>proxy_tools/common_tools}}