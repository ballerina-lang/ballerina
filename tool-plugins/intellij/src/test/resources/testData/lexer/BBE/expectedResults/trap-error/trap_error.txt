import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Start dividing numbers"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A panic is occurred when the `divideNumbers` function is executed.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `trap` handles the error that occurred in the `divideNumbers` function and assigns the `result` variable.')
WHITE_SPACE ('\n    ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
trap ('trap')
WHITE_SPACE (' ')
identifier ('divideNumbers')
( ('(')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int result: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('divideNumbers')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('b')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"Division by 0 is not defined"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
/ ('/')
WHITE_SPACE (' ')
identifier ('b')
; (';')
WHITE_SPACE ('\n')
} ('}')
