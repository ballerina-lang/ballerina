import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// `Person` type is defined.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('married')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('salary')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// `Address` type is defined.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('state')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The returned `tuple` is later used by Ballerina tests.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('Person')
, (',')
WHITE_SPACE (' ')
identifier ('Person')
, (',')
WHITE_SPACE (' ')
string ('string')
) (')')
? ('?')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Specify values for the `Address` record.')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('country')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"USA"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('state')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"NC"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Raleigh"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('street')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Daniels St"')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Specify values for the `Person` record.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Alex"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('24')
, (',')
WHITE_SPACE ('\n        ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE ('\n        ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('8000.0')
, (',')
WHITE_SPACE ('\n        ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Assign the `person` value to `anyValue`. So the type of the value has to be determined in runtime.')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('anyValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('person')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Invoke the clone builtin method. The return type is either `Person` or `error`. Note that the `error` is returned')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// if the value being cloned is not of `anydata` type. If the type of the value being cloned can be determined in')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// compile time, return value is exactly of the type of the value being cloned.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// e.g. Person result = person.clone();')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In above example, 'person' is cloned instead of 'anyValue'. In compile time itself, we know the return type')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// should be 'Person'')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('anyValue')
. ('.')
identifier ('clone')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Type of any variable is only determined in runtime. Therefore we have to check if the returned type is `Person`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// or an `error`. If we cloned the `person` value, we do not need to check the type of the return value.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source value: "')
, (',')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cloned value: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('refCheck')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Check if the reference of both values is not the same.')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
!== ('!==')
WHITE_SPACE (' ')
identifier ('person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('refCheck')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Source and Clone are at two different memory locations"')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('refCheck')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
identifier ('person')
, (',')
WHITE_SPACE (' ')
identifier ('result')
, (',')
WHITE_SPACE (' ')
identifier ('refCheck')
) (')')
; (';')
WHITE_SPACE ('\n\n     ')
LINE_COMMENT ('// If the result is an error, the error is printed out and () is returned.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cannot clone: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
