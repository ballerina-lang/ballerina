import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
int ('int')
WHITE_SPACE (' ')
identifier ('count')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n\n')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"https://postman-echo.com"')
, (',')
WHITE_SPACE (' ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Asynchronously call the function named `sum()`.')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
DECIMAL_INTEGER_LITERAL ('40')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('50')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can pass around the value of the `future` variable')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and call its results later.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('squarePlusCube')
( ('(')
identifier ('f1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"SQ + CB = "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Call the `countInfinity()` function, that runs forever in asynchronous ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// mode.')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
( ('(')
) (')')
> ('>')
WHITE_SPACE (' ')
identifier ('f2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('countInfinity')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('1000')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Check whether the function call is done.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Check whether someone cancelled the asynchronous execution.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isCancelled')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Cancel the asynchronous operation.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('cancelled')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('f2')
. ('.')
identifier ('cancel')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('cancelled')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Counting done in one second: "')
, (',')
WHITE_SPACE (' ')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f2')
. ('.')
identifier ('isCancelled')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// async action call')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
identifier ('http')
: (':')
identifier ('Response')
| ('|')
error ('error')
> ('>')
WHITE_SPACE (' ')
identifier ('f3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('clientEp')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/get?test=123"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('sum')
( ('(')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f3')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('response')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
identifier ('f3')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
untaint ('untaint')
WHITE_SPACE (' ')
identifier ('response')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('response')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('response')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('f3')
. ('.')
identifier ('isDone')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('square')
( ('(')
DECIMAL_INTEGER_LITERAL ('20')
) (')')
; (';')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('f5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('greet')
( ('(')
QUOTED_STRING_LITERAL ('"Bert"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can wait for either of the asynchronous functions to finish.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Here `f4` will finish before `f5` since runtim:sleep() is called')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// in the `greet()` function to delay its execution. The value returned')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// by the asynchronous function that finishes first will be taken as the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// result.')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
string ('string')
WHITE_SPACE (' ')
identifier ('anyResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
identifier ('f4')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('f5')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('anyResult')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f6')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
DECIMAL_INTEGER_LITERAL ('40')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('60')
) (')')
; (';')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f7')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('cube')
( ('(')
DECIMAL_INTEGER_LITERAL ('3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
future ('future')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('f8')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('greet')
( ('(')
QUOTED_STRING_LITERAL ('"Moose"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// You can wait for all of the above asynchronous functions to finish.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The result of all these functions can be assigned to a map or a record.')
WHITE_SPACE ('\n    ')
map ('map')
WHITE_SPACE (' ')
< ('<')
int ('int')
| ('|')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('resultMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
{ ('{')
identifier ('first_field')
: (':')
WHITE_SPACE (' ')
identifier ('f6')
, (',')
WHITE_SPACE (' ')
identifier ('second_field')
: (':')
WHITE_SPACE (' ')
identifier ('f7')
, (',')
WHITE_SPACE (' \n                                            ')
identifier ('third_field')
: (':')
WHITE_SPACE (' ')
identifier ('f8')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('resultMap')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
future ('future')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('f9')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
start ('start')
WHITE_SPACE (' ')
identifier ('greet')
( ('(')
QUOTED_STRING_LITERAL ('"Bert"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('first_field')
; (';')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('second_field')
; (';')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('third_field')
; (';')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
identifier ('rec')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
wait ('wait')
WHITE_SPACE (' ')
{ ('{')
identifier ('first_field')
: (':')
WHITE_SPACE (' ')
identifier ('f6')
, (',')
WHITE_SPACE (' ')
identifier ('second_field')
: (':')
WHITE_SPACE (' ')
identifier ('f7')
, (',')
WHITE_SPACE (' ')
identifier ('third_field')
: (':')
WHITE_SPACE (' ')
identifier ('f9')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"first field of record --> "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('rec')
. ('.')
identifier ('first_field')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"second field of record --> "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('rec')
. ('.')
identifier ('second_field')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"third field of record --> "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('rec')
. ('.')
identifier ('third_field')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('sum')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('a')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('b')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('square')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('n')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('cube')
( ('(')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
* ('*')
WHITE_SPACE (' ')
identifier ('n')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('greet')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('2000')
) (')')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hello "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"!!"')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('squarePlusCube')
( ('(')
future ('future')
< ('<')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('f')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sq')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('square')
( ('(')
identifier ('n')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('sq')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('n')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
identifier ('f')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('cb')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('cube')
( ('(')
identifier ('n')
) (')')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('sq')
; (';')
WHITE_SPACE ('\n        ')
identifier ('sq')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('sq')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('cb')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('countInfinity')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
while ('while')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('true')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('count')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
