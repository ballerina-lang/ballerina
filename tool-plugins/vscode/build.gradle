import org.apache.tools.ant.taskdefs.condition.Os
apply from: "$rootDir/gradle/jsProject.gradle"

configurations {
    dist {
      transitive false
    }
    ballerinaTools
}

npmBuild() {
    PatternSet patternSet = new PatternSet();
	patternSet.exclude("**/out/**");
    patternSet.exclude("**/*.vsix/**");
    patternSet.exclude("**/coverage/**");

    FileTree src = files('.').asFileTree;
    inputs.files(src.matching(patternSet))

    dependsOn(':composer-library:build')
    outputs.dir("out")
    outputs.cacheIf { true } 

    doFirst {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'npm', 'run', 'package'
            } else {
                commandLine 'npm', 'run', 'package'
            }
        }
    }
}

task copyDistribution() {
    dependsOn ":ballerina-tools:build"
    doFirst {
        copy {
            from file(configurations.ballerinaTools.asPath)
            into "extractedDistribution/ballerina-tools-${project.version}"
        }
    }
}

task assemble(overwrite: true) {
    dependsOn 'npmBuild'
    dependsOn(':composer-library:assemble')
}

dependencies {
    dist project(':composer-library')
    ballerinaTools project(path: ':ballerina-tools', configuration: 'unzipped')
}

task test(type: Exec) {
    dependsOn copyDistribution
    onlyIf {
        !assemble.state.upToDate
    }
    doFirst {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', 'npm', 'run', 'test'
            } else {
                commandLine 'npm', 'run', 'test'
            }
        }
    }
}

build {
    dependsOn test
}