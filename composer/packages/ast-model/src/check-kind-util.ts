// This is an autogenerated file. Do not edit. Run 'npm run gen-models' to generate.
// Run 'BALLERINA_HOME="your/ballerina/home" npm run gen-ast-interfaces' to generate.
import { ASTNode } from "./ast-interfaces";

export function isAbort(node: ASTNode) {
  return node.kind === "Abort";
}

export function isAnnotation(node: ASTNode) {
  return node.kind === "Annotation";
}

export function isAnnotationAttachment(node: ASTNode) {
  return node.kind === "AnnotationAttachment";
}

export function isArrayLiteralExpr(node: ASTNode) {
  return node.kind === "ArrayLiteralExpr";
}

export function isArrayType(node: ASTNode) {
  return node.kind === "ArrayType";
}

export function isArrowExpr(node: ASTNode) {
  return node.kind === "ArrowExpr";
}

export function isAssignment(node: ASTNode) {
  return node.kind === "Assignment";
}

export function isAwaitExpr(node: ASTNode) {
  return node.kind === "AwaitExpr";
}

export function isBinaryExpr(node: ASTNode) {
  return node.kind === "BinaryExpr";
}

export function isBlock(node: ASTNode) {
  return node.kind === "Block";
}

export function isBracedTupleExpr(node: ASTNode) {
  return node.kind === "BracedTupleExpr";
}

export function isBreak(node: ASTNode) {
  return node.kind === "Break";
}

export function isBuiltInRefType(node: ASTNode) {
  return node.kind === "BuiltInRefType";
}

export function isCatch(node: ASTNode) {
  return node.kind === "Catch";
}

export function isCheckExpr(node: ASTNode) {
  return node.kind === "CheckExpr";
}

export function isCompensate(node: ASTNode) {
  return node.kind === "Compensate";
}

export function isCompilationUnit(node: ASTNode) {
  return node.kind === "CompilationUnit";
}

export function isCompoundAssignment(node: ASTNode) {
  return node.kind === "CompoundAssignment";
}

export function isConstrainedType(node: ASTNode) {
  return node.kind === "ConstrainedType";
}

export function isDeprecated(node: ASTNode) {
  return node.kind === "Deprecated";
}

export function isDocumentationDescription(node: ASTNode) {
  return node.kind === "DocumentationDescription";
}

export function isDocumentationParameter(node: ASTNode) {
  return node.kind === "DocumentationParameter";
}

export function isDone(node: ASTNode) {
  return node.kind === "Done";
}

export function isElvisExpr(node: ASTNode) {
  return node.kind === "ElvisExpr";
}

export function isEndpoint(node: ASTNode) {
  return node.kind === "Endpoint";
}

export function isExpressionStatement(node: ASTNode) {
  return node.kind === "ExpressionStatement";
}

export function isFieldBasedAccessExpr(node: ASTNode) {
  return node.kind === "FieldBasedAccessExpr";
}

export function isFiniteTypeNode(node: ASTNode) {
  return node.kind === "FiniteTypeNode";
}

export function isForeach(node: ASTNode) {
  return node.kind === "Foreach";
}

export function isForever(node: ASTNode) {
  return node.kind === "Forever";
}

export function isForkJoin(node: ASTNode) {
  return node.kind === "ForkJoin";
}

export function isFunction(node: ASTNode) {
  return node.kind === "Function";
}

export function isFunctionType(node: ASTNode) {
  return node.kind === "FunctionType";
}

export function isGroupBy(node: ASTNode) {
  return node.kind === "GroupBy";
}

export function isHaving(node: ASTNode) {
  return node.kind === "Having";
}

export function isIdentifier(node: ASTNode) {
  return node.kind === "Identifier";
}

export function isIf(node: ASTNode) {
  return node.kind === "If";
}

export function isImport(node: ASTNode) {
  return node.kind === "Import";
}

export function isIndexBasedAccessExpr(node: ASTNode) {
  return node.kind === "IndexBasedAccessExpr";
}

export function isIntRangeExpr(node: ASTNode) {
  return node.kind === "IntRangeExpr";
}

export function isInvocation(node: ASTNode) {
  return node.kind === "Invocation";
}

export function isJoinStreamingInput(node: ASTNode) {
  return node.kind === "JoinStreamingInput";
}

export function isLambda(node: ASTNode) {
  return node.kind === "Lambda";
}

export function isLimit(node: ASTNode) {
  return node.kind === "Limit";
}

export function isLiteral(node: ASTNode) {
  return node.kind === "Literal";
}

export function isLock(node: ASTNode) {
  return node.kind === "Lock";
}

export function isMarkdownDocumentation(node: ASTNode) {
  return node.kind === "MarkdownDocumentation";
}

export function isMatch(node: ASTNode) {
  return node.kind === "Match";
}

export function isMatchExpression(node: ASTNode) {
  return node.kind === "MatchExpression";
}

export function isMatchExpressionPatternClause(node: ASTNode) {
  return node.kind === "MatchExpressionPatternClause";
}

export function isMatchPatternClause(node: ASTNode) {
  return node.kind === "MatchPatternClause";
}

export function isNamedArgsExpr(node: ASTNode) {
  return node.kind === "NamedArgsExpr";
}

export function isNext(node: ASTNode) {
  return node.kind === "Next";
}

export function isObjectType(node: ASTNode) {
  return node.kind === "ObjectType";
}

export function isOrderBy(node: ASTNode) {
  return node.kind === "OrderBy";
}

export function isOrderByVariable(node: ASTNode) {
  return node.kind === "OrderByVariable";
}

export function isOutputRateLimit(node: ASTNode) {
  return node.kind === "OutputRateLimit";
}

export function isPatternClause(node: ASTNode) {
  return node.kind === "PatternClause";
}

export function isPatternStreamingEdgeInput(node: ASTNode) {
  return node.kind === "PatternStreamingEdgeInput";
}

export function isPatternStreamingInput(node: ASTNode) {
  return node.kind === "PatternStreamingInput";
}

export function isRecordLiteralExpr(node: ASTNode) {
  return node.kind === "RecordLiteralExpr";
}

export function isRecordLiteralKeyValue(node: ASTNode) {
  return node.kind === "RecordLiteralKeyValue";
}

export function isRecordType(node: ASTNode) {
  return node.kind === "RecordType";
}

export function isResource(node: ASTNode) {
  return node.kind === "Resource";
}

export function isRestArgsExpr(node: ASTNode) {
  return node.kind === "RestArgsExpr";
}

export function isRetry(node: ASTNode) {
  return node.kind === "Retry";
}

export function isReturn(node: ASTNode) {
  return node.kind === "Return";
}

export function isScope(node: ASTNode) {
  return node.kind === "Scope";
}

export function isSelectClause(node: ASTNode) {
  return node.kind === "SelectClause";
}

export function isSelectExpression(node: ASTNode) {
  return node.kind === "SelectExpression";
}

export function isService(node: ASTNode) {
  return node.kind === "Service";
}

export function isSimpleVariableRef(node: ASTNode) {
  return node.kind === "SimpleVariableRef";
}

export function isStreamAction(node: ASTNode) {
  return node.kind === "StreamAction";
}

export function isStreamingInput(node: ASTNode) {
  return node.kind === "StreamingInput";
}

export function isStreamingQuery(node: ASTNode) {
  return node.kind === "StreamingQuery";
}

export function isStringTemplateLiteral(node: ASTNode) {
  return node.kind === "StringTemplateLiteral";
}

export function isTable(node: ASTNode) {
  return node.kind === "Table";
}

export function isTableColumn(node: ASTNode) {
  return node.kind === "TableColumn";
}

export function isTableQuery(node: ASTNode) {
  return node.kind === "TableQuery";
}

export function isTableQueryExpression(node: ASTNode) {
  return node.kind === "TableQueryExpression";
}

export function isTernaryExpr(node: ASTNode) {
  return node.kind === "TernaryExpr";
}

export function isThrow(node: ASTNode) {
  return node.kind === "Throw";
}

export function isTransaction(node: ASTNode) {
  return node.kind === "Transaction";
}

export function isTry(node: ASTNode) {
  return node.kind === "Try";
}

export function isTupleDestructure(node: ASTNode) {
  return node.kind === "TupleDestructure";
}

export function isTupleTypeNode(node: ASTNode) {
  return node.kind === "TupleTypeNode";
}

export function isTypeConversionExpr(node: ASTNode) {
  return node.kind === "TypeConversionExpr";
}

export function isTypeDefinition(node: ASTNode) {
  return node.kind === "TypeDefinition";
}

export function isTypeInitExpr(node: ASTNode) {
  return node.kind === "TypeInitExpr";
}

export function isTypedescExpression(node: ASTNode) {
  return node.kind === "TypedescExpression";
}

export function isUnaryExpr(node: ASTNode) {
  return node.kind === "UnaryExpr";
}

export function isUnionTypeNode(node: ASTNode) {
  return node.kind === "UnionTypeNode";
}

export function isUserDefinedType(node: ASTNode) {
  return node.kind === "UserDefinedType";
}

export function isValueType(node: ASTNode) {
  return node.kind === "ValueType";
}

export function isVariable(node: ASTNode) {
  return node.kind === "Variable";
}

export function isVariableDef(node: ASTNode) {
  return node.kind === "VariableDef";
}

export function isWhere(node: ASTNode) {
  return node.kind === "Where";
}

export function isWhile(node: ASTNode) {
  return node.kind === "While";
}

export function isWindowClause(node: ASTNode) {
  return node.kind === "WindowClause";
}

export function isWithin(node: ASTNode) {
  return node.kind === "Within";
}

export function isWorker(node: ASTNode) {
  return node.kind === "Worker";
}

export function isWorkerReceive(node: ASTNode) {
  return node.kind === "WorkerReceive";
}

export function isWorkerSend(node: ASTNode) {
  return node.kind === "WorkerSend";
}

export function isXmlAttribute(node: ASTNode) {
  return node.kind === "XmlAttribute";
}

export function isXmlAttributeAccessExpr(node: ASTNode) {
  return node.kind === "XmlAttributeAccessExpr";
}

export function isXmlCommentLiteral(node: ASTNode) {
  return node.kind === "XmlCommentLiteral";
}

export function isXmlElementLiteral(node: ASTNode) {
  return node.kind === "XmlElementLiteral";
}

export function isXmlPiLiteral(node: ASTNode) {
  return node.kind === "XmlPiLiteral";
}

export function isXmlQname(node: ASTNode) {
  return node.kind === "XmlQname";
}

export function isXmlQuotedString(node: ASTNode) {
  return node.kind === "XmlQuotedString";
}

export function isXmlTextLiteral(node: ASTNode) {
  return node.kind === "XmlTextLiteral";
}

export function isXmlns(node: ASTNode) {
  return node.kind === "Xmlns";
}
