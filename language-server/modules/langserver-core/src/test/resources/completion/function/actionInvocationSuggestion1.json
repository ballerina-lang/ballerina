{
  "position": {
    "line": 15,
    "character": 16
  },
  "source": "function/source/actionInvocationSuggestion1.bal",
  "items": [
    {
      "label": "post(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `post()` function can be used to send HTTP POST requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "post(${1:path}, ${2:message})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "head(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message \u003d ())(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `head()` function can be used to send HTTP HEAD requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "head(${1:path}, message \u003d ${2:()})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "put(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `put()` function can be used to send HTTP PUT requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "put(${1:path}, ${2:message})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "execute(string httpVerb, string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nInvokes an HTTP call with the specified HTTP verb.\n  \n  \n---    \n**Parameters**  \n- _httpVerb_  \n    HTTP verb value  \n  \n- _path_  \n    Resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "execute(${1:httpVerb}, ${2:path}, ${3:message})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "patch(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "patch(${1:path}, ${2:message})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "delete(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "delete(${1:path}, ${2:message})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "get(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message \u003d ())(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `get()` function can be used to send HTTP GET requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Request path  \n  \n- _message_  \n    An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "get(${1:path}, message \u003d ${2:()})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "options(string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message \u003d ())(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Request path  \n  \n- _message_  \n    An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "options(${1:path}, message \u003d ${2:()})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "forward(string path, http:Request request)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe `forward()` function can be used to invoke an HTTP call with inbound request\u0027s HTTP verb\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Request path  \n  \n- _request_  \n    An HTTP inbound request message  \n"
        }
      },
      "sortText": "121",
      "insertText": "forward(${1:path}, ${2:request})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "submit(string httpVerb, string path, ballerina/http:Request|string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] message)(ballerina/http:HttpFuture|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nSubmits an HTTP request to a service with the specified HTTP verb.\nThe `submit()` function does not give out a `Response` as the result,\nrather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n  \n  \n---    \n**Parameters**  \n- _httpVerb_  \n    The HTTP verb value  \n  \n- _path_  \n    The resource path  \n  \n- _message_  \n    An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n            `io:ReadableByteChannel` or `mime:Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "submit(${1:httpVerb}, ${2:path}, ${3:message})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getResponse(http:HttpFuture httpFuture)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThis just pass the request to actual network call.\n  \n  \n---    \n**Parameters**  \n- _httpFuture_  \n    The `HttpFuture` relates to a previous asynchronous invocation  \n"
        }
      },
      "sortText": "121",
      "insertText": "getResponse(${1:httpFuture})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "hasPromise(http:HttpFuture httpFuture)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThis just pass the request to actual network call.\n  \n  \n---    \n**Parameters**  \n- _httpFuture_  \n    The `HttpFuture` relates to a previous asynchronous invocation  \n"
        }
      },
      "sortText": "121",
      "insertText": "hasPromise(${1:httpFuture})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getNextPromise(http:HttpFuture httpFuture)(ballerina/http:PushPromise|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThis just pass the request to actual network call.\n  \n  \n---    \n**Parameters**  \n- _httpFuture_  \n    The `HttpFuture` relates to a previous asynchronous invocation  \n"
        }
      },
      "sortText": "121",
      "insertText": "getNextPromise(${1:httpFuture})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getPromisedResponse(http:PushPromise promise)(ballerina/http:Response|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThis just pass the request to actual network call.\n  \n  \n---    \n**Parameters**  \n- _promise_  \n    The related `PushPromise`  \n"
        }
      },
      "sortText": "121",
      "insertText": "getPromisedResponse(${1:promise})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "rejectPromise(http:PushPromise promise)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThis just pass the request to actual network call.\n  \n  \n---    \n**Parameters**  \n- _promise_  \n    The Push Promise to be rejected  \n"
        }
      },
      "sortText": "121",
      "insertText": "rejectPromise(${1:promise});",
      "insertTextFormat": "Snippet"
    }
  ]
}