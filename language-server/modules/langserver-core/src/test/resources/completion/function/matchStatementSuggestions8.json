{
  "position": {
    "line": 28,
    "character": 12
  },
  "source": "function/source/matchStatementSuggestionCommon.bal",
  "items": [
    {
      "label": "xmlns",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "190",
      "insertText": "xmlns \"${1}\" as ${2:ns};",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "210",
      "insertText": "var ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "error",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "190",
      "insertText": "error ${1:name} \u003d error(\"${2:errorCode}\", { message: \"${3}\" });",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "foreach",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "foreach ${1:var} ${2:item} in ${3:itemList} {\n\t${4}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "fork",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "fork {\n\t${1}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "if",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "if (${1:true}) {\n\t${2}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "lock",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "lock {\n\t${1}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "match",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "match ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "panic",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "panic ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "return",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "return;",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "transaction",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "transaction with retries ${1:0} {\n\t${2}\n} onretry {\n\t${3}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "while",
      "kind": "Snippet",
      "detail": "Statement",
      "sortText": "200",
      "insertText": "while (${1:true}) {\n\t${2}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "channel",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "channel"
    },
    {
      "label": "bar(string|int|boolean i)(string|int|boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "markdown**Package:** _._  \n  \nnull  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n"
        }
      },
      "sortText": "120",
      "insertText": "bar(${1:i})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "xml",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "xml"
    },
    {
      "label": "queryTableWithJoinClause(string sqlQuery, table fromTable, table joinTable, any parameters, any retType)(table\u003c$anonType$builtin$8\u003e)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/builtin_  \n  \nExecute the given sql query to fetch the records and return as a new in memory table.\n  \n  \n---    \n**Parameters**  \n- _sqlQuery_  \n    The query to execute  \n  \n- _fromTable_  \n    The table on which the query is executed  \n  \n- _joinTable_  \n    The table which is joined with \u0027fromTable\u0027  \n  \n- _parameters_  \n    liternal parameters to be passed to prepared statement \u0027sqlQuery\u0027  \n  \n- _retType_  \n    return type of the resultant table instance  \n"
        }
      },
      "sortText": "120",
      "insertText": "queryTableWithJoinClause(${1:sqlQuery}, ${2:fromTable}, ${3:joinTable}, ${4:parameters}, ${5:retType})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "TableConfig",
      "kind": "Class",
      "detail": "BType",
      "documentation": {
        "left": "TableConfig represents properties used during table initialization.\n"
      },
      "sortText": "170",
      "insertText": "TableConfig"
    },
    {
      "label": "byte",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "byte"
    },
    {
      "label": "queryTableWithoutJoinClause(string sqlQuery, table fromTable, any parameters, any retType)(table\u003c$anonType$builtin$10\u003e)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/builtin_  \n  \nExecute the given sql query to fetch the records and return as a new in memory table.\n  \n  \n---    \n**Parameters**  \n- _sqlQuery_  \n    The query to execute  \n  \n- _fromTable_  \n    The table on which the query is executed  \n  \n- _parameters_  \n    literal parameters to be passed to prepared statement \u0027sqlQuery\u0027  \n  \n- _retType_  \n    return type of the resultant table instance  \n"
        }
      },
      "sortText": "120",
      "insertText": "queryTableWithoutJoinClause(${1:sqlQuery}, ${2:fromTable}, ${3:parameters}, ${4:retType})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Person",
      "kind": "Class",
      "detail": "BType",
      "sortText": "170",
      "insertText": "Person"
    },
    {
      "label": "startForever(string streamQuery, any inStreamRefs, any inTableRefs, any outStreamRefs, any outTableRefs, any funcPointers)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/builtin_  \n  \nCreates the forever runtime.\n  \n  \n---    \n**Parameters**  \n- _streamQuery_  \n    The siddhi query by which the siddhi app runtime is created  \n  \n- _inStreamRefs_  \n    References of the input streams in the forever  \n  \n- _inTableRefs_  \n    References of the input tables in the forever  \n  \n- _outStreamRefs_  \n    References of the output streams in the forever  \n  \n- _outTableRefs_  \n    References of the output tables in the forever  \n  \n- _funcPointers_  \n    References of the functions to invoke as the streaming action  \n"
        }
      },
      "sortText": "120",
      "insertText": "startForever(${1:streamQuery}, ${2:inStreamRefs}, ${3:inTableRefs}, ${4:outStreamRefs}, ${5:outTableRefs}, ${6:funcPointers});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "stream",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "stream"
    },
    {
      "label": "AbstractListener",
      "kind": "Class",
      "detail": "BType",
      "sortText": "170",
      "insertText": "AbstractListener"
    },
    {
      "label": "map",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "map"
    },
    {
      "label": "table",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "table"
    },
    {
      "label": "anydata",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "anydata"
    },
    {
      "label": "i",
      "kind": "Variable",
      "detail": "string|int|boolean",
      "sortText": "110",
      "insertText": "i"
    },
    {
      "label": "p",
      "kind": "Variable",
      "detail": "Person",
      "sortText": "110",
      "insertText": "p"
    },
    {
      "label": "future",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "future"
    },
    {
      "label": "typedesc",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "typedesc"
    },
    {
      "label": "float",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "float"
    },
    {
      "label": "null",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "null"
    },
    {
      "label": "decimal",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "decimal"
    },
    {
      "label": "string",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "string"
    },
    {
      "label": "error",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "error"
    },
    {
      "label": "var5",
      "kind": "Variable",
      "detail": "string",
      "sortText": "110",
      "insertText": "var5"
    },
    {
      "label": "json",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "json"
    },
    {
      "label": "var4",
      "kind": "Variable",
      "detail": "int",
      "sortText": "110",
      "insertText": "var4"
    },
    {
      "label": "var3",
      "kind": "Variable",
      "detail": "(string,int)|(float,(string,boolean))|(float,(string,(boolean,int)))|float",
      "sortText": "110",
      "insertText": "var3"
    },
    {
      "label": "var2",
      "kind": "Variable",
      "detail": "(string,int,boolean)",
      "sortText": "110",
      "insertText": "var2"
    },
    {
      "label": "var1",
      "kind": "Variable",
      "detail": "string|int|boolean",
      "sortText": "110",
      "insertText": "var1"
    },
    {
      "label": "any",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "any"
    },
    {
      "label": "int",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "int"
    },
    {
      "label": "boolean",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "boolean"
    },
    {
      "label": "service",
      "kind": "Keyword",
      "detail": "BType",
      "sortText": "170",
      "insertText": "service"
    },
    {
      "label": "ballerina/http",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "http"
    },
    {
      "label": "ballerina/io",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "io"
    },
    {
      "label": "ballerina/transactions",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "transactions",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/transactions;\n"
        }
      ]
    },
    {
      "label": "ballerina/websub",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "websub",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/websub;\n"
        }
      ]
    },
    {
      "label": "ballerina/grpc",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "grpc",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/grpc;\n"
        }
      ]
    },
    {
      "label": "ballerina/reflect",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "reflect",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/reflect;\n"
        }
      ]
    },
    {
      "label": "ballerina/log",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "log",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/log;\n"
        }
      ]
    },
    {
      "label": "ballerina/time",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "time",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/time;\n"
        }
      ]
    },
    {
      "label": "ballerina/test",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "test",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/test;\n"
        }
      ]
    },
    {
      "label": "ballerina/runtime",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "runtime",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/runtime;\n"
        }
      ]
    },
    {
      "label": "ballerina/openapi",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "openapi",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/openapi;\n"
        }
      ]
    },
    {
      "label": "ballerina/file",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "file",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/file;\n"
        }
      ]
    },
    {
      "label": "ballerina/sql",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "sql",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/sql;\n"
        }
      ]
    },
    {
      "label": "ballerina/internal",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "internal",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/internal;\n"
        }
      ]
    },
    {
      "label": "ballerina/mysql",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "mysql",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/mysql;\n"
        }
      ]
    },
    {
      "label": "ballerina/encoding",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "encoding",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/encoding;\n"
        }
      ]
    },
    {
      "label": "ballerina/mime",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "mime",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/mime;\n"
        }
      ]
    },
    {
      "label": "ballerina/task",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "task",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/task;\n"
        }
      ]
    },
    {
      "label": "ballerina/crypto",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "crypto",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/crypto;\n"
        }
      ]
    },
    {
      "label": "ballerina/artemis",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "artemis",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/artemis;\n"
        }
      ]
    },
    {
      "label": "ballerina/utils",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "utils",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/utils;\n"
        }
      ]
    },
    {
      "label": "ballerina/cache",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "cache",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/cache;\n"
        }
      ]
    },
    {
      "label": "ballerina/auth",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "auth",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/auth;\n"
        }
      ]
    },
    {
      "label": "ballerina/jms",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "jms",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/jms;\n"
        }
      ]
    },
    {
      "label": "ballerina/system",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "system",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/system;\n"
        }
      ]
    },
    {
      "label": "ballerina/h2",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "h2",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/h2;\n"
        }
      ]
    },
    {
      "label": "ballerina/builtin",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "builtin",
      "additionalTextEdits": [
      ]
    },
    {
      "label": "ballerina/math",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "math",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/math;\n"
        }
      ]
    },
    {
      "label": "ballerina/config",
      "kind": "Module",
      "detail": "Package",
      "sortText": "140",
      "insertText": "config",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 2,
              "character": 0
            },
            "end": {
              "line": 2,
              "character": 0
            }
          },
          "newText": "import ballerina/config;\n"
        }
      ]
    },
    {
      "label": "i - typeguard i",
      "kind": "Snippet",
      "detail": "Destructure the variable i with typeguard",
      "sortText": "110",
      "insertText": "if (i is string) {\n\t${1}\n} else if (i is int) {\n\t${2}\n} else if (i is boolean) {\n\t${3}\n} else {\n\t${3}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var3 - typeguard var3",
      "kind": "Snippet",
      "detail": "Destructure the variable var3 with typeguard",
      "sortText": "110",
      "insertText": "if (var3 is (string,int)) {\n\t${1}\n} else if (var3 is (float,(string,boolean))) {\n\t${2}\n} else if (var3 is (float,(string,(boolean,int)))) {\n\t${3}\n} else if (var3 is float) {\n\t${4}\n} else {\n\t${4}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var1 - typeguard var1",
      "kind": "Snippet",
      "detail": "Destructure the variable var1 with typeguard",
      "sortText": "110",
      "insertText": "if (var1 is string) {\n\t${1}\n} else if (var1 is int) {\n\t${2}\n} else if (var1 is boolean) {\n\t${3}\n} else {\n\t${3}\n}",
      "insertTextFormat": "Snippet"
    }
  ]
}