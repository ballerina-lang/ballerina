{
  "position": {
    "line": 6,
    "character": 17
  },
  "source": "function/source/variableBoundItemSuggestions1.bal",
  "items": [
    {
      "label": "fromJsonString()((json|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nParse a string in JSON format and return the the value that it represents.\nAll numbers in the JSON will be represented as float values.\nReturns an error if the string cannot be parsed.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    string representation of json  \n  \n  \n**Return**  \n(json|error)"
        }
      },
      "sortText": "130",
      "insertText": "fromJsonString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getCodePoint(int i)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns the unicode codepoint at index `i`.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n- _i_  \n    code point index  \n  \n  \n**Return**  \nint"
        }
      },
      "sortText": "130",
      "insertText": "getCodePoint(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toCodePointInts()(int[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns an array with an int for each code point in `str`.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nint[]"
        }
      },
      "sortText": "130",
      "insertText": "toCodePointInts(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toUpperAscii()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturn a-z into A-Z and leave other characters unchanged.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toUpperAscii(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "substring(int startIndex, int endIndex)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns a string that is a substring of this string.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    source string.  \n  \n- _startIndex_  \n    the beginning index, inclusive.  \n  \n- _endIndex_  \n    the ending index, exclusive.  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "substring(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns an iterator over the string\nThe iterator will return the substrings of length 1 in order.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nobject { public function next () returns (record {| string value; |}?); }"
        }
      },
      "sortText": "130",
      "insertText": "iterator(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "isReadOnly()(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nTests whether `v` is read-only, i.e. immutable\nReturns true if read-only, false otherwise.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    source value  \n  \n  \n**Return**  \nboolean"
        }
      },
      "sortText": "130",
      "insertText": "isReadOnly(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "trim()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nRemove ASCII white space characters (0x9...0xD, 0x20) from start and end of `str`.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "trim(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "join(...string)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns a new string composed of `strs` elements joined together with `separator`.\n  \n  \n---    \n**Parameters**  \n- _seperator_  \n    delimiter string  \n  \n- _strs_  \n    strings to join  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "join(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "indexOf(string substr, int startIndx)((int|()))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns the index of the first occurrence of `substr` in the part of the `str` starting at `startIndex`\nor nil if it does not occur.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n- _substr_  \n    sub string to search for  \n  \n- _start_  \n    index to start search from  \n  \n  \n**Return**  \nint?"
        }
      },
      "sortText": "130",
      "insertText": "indexOf(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toLowerAscii()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturn A-Z into a-z and leave other characters unchanged.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toLowerAscii(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toJsonString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturn the string that represents `v` in JSON format.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    json value  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toJsonString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "StringIterator",
      "kind": "Class",
      "detail": "Object",
      "sortText": "120",
      "insertText": "StringIterator",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBytes()(byte[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nRepresents `str` as an array of bytes using UTF-8.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nbyte[]"
        }
      },
      "sortText": "130",
      "insertText": "toBytes(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneReadOnly()(anydata)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a clone of `value` that is read-only, i.e. immutable.\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    source value  \n"
        }
      },
      "sortText": "130",
      "insertText": "cloneReadOnly(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns the length of the string.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n  \n**Return**  \nint"
        }
      },
      "sortText": "130",
      "insertText": "length(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "concat(...string)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nConcatenate all the `strs`. Empty string if empty.\n  \n  \n---    \n**Parameters**  \n- _strs_  \n    strings to concat  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "concat(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "mergeJson(json j2)((json|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturn the result of merging json value `j1` with `j2`.\n  \n  \n---    \n**Parameters**  \n- _j1_  \n    json value  \n  \n- _j2_  \n    json value  \n  \n  \n**Return**  \n(json|error)"
        }
      },
      "sortText": "130",
      "insertText": "mergeJson(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "clone()(anydata)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a clone of `value`.\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    source value  \n"
        }
      },
      "sortText": "130",
      "insertText": "clone(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "endsWith(string substr)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns true if `str` end with `substr`.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n- _substr_  \n    sub string  \n  \n  \n**Return**  \nboolean"
        }
      },
      "sortText": "130",
      "insertText": "endsWith(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a simple, human-readable representation of `value` as a string.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    source value  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "codePointCompare(string str2)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nLexicographically compare strings using their Unicode code points.\nThis will allow strings to be ordered in a consistent and well-defined way,\nbut the ordering will not typically be consistent with cultural expectations\nfor sorted order.\n  \n  \n---    \n**Parameters**  \n- _str1_  \n    string to compare  \n  \n- _str2_  \n    string to compare  \n  \n  \n**Return**  \nint"
        }
      },
      "sortText": "130",
      "insertText": "codePointCompare(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "startsWith(string substr)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns true if `str` starts with `substr`.\n  \n  \n---    \n**Parameters**  \n- _str_  \n    the string  \n  \n- _substr_  \n    sub string  \n  \n  \n**Return**  \nboolean"
        }
      },
      "sortText": "130",
      "insertText": "startsWith(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
