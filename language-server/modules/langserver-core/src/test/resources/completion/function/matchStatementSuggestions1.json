{
  "position": {
    "line": 11,
    "character": 10
  },
  "source": "function/source/matchStatementSuggestions1.bal",
  "items": [
    {
      "label": "bar(i)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "markdown**Package:** _._  \n  \nnull  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \n"
        }
      },
      "sortText": "120",
      "insertText": "bar(i) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "queryTableWithJoinClause(sqlQuery,fromTable,joinTable,parameters,retType)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/builtin_  \n  \nExecute the given sql query to fetch the records and return as a new in memory table.\n  \n  \n---    \n**Parameters**  \n- _sqlQuery_  \n    The query to execute  \n  \n- _fromTable_  \n    The table on which the query is executed  \n  \n- _joinTable_  \n    The table which is joined with \u0027fromTable\u0027  \n  \n- _parameters_  \n    liternal parameters to be passed to prepared statement \u0027sqlQuery\u0027  \n  \n- _retType_  \n    return type of the resultant table instance  \n"
        }
      },
      "sortText": "120",
      "insertText": "queryTableWithJoinClause(sqlQuery,fromTable,joinTable,parameters,retType) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "io",
      "kind": "Module",
      "detail": "Package",
      "sortText": "150",
      "insertText": "io"
    },
    {
      "label": "queryTableWithoutJoinClause(sqlQuery,fromTable,parameters,retType)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/builtin_  \n  \nExecute the given sql query to fetch the records and return as a new in memory table.\n  \n  \n---    \n**Parameters**  \n- _sqlQuery_  \n    The query to execute  \n  \n- _fromTable_  \n    The table on which the query is executed  \n  \n- _parameters_  \n    literal parameters to be passed to prepared statement \u0027sqlQuery\u0027  \n  \n- _retType_  \n    return type of the resultant table instance  \n"
        }
      },
      "sortText": "120",
      "insertText": "queryTableWithoutJoinClause(sqlQuery,fromTable,parameters,retType) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "startForever(streamQuery,inStreamRefs,inTableRefs,outStreamRefs,outTableRefs,funcPointers)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/builtin_  \n  \nCreates the forever runtime.\n  \n  \n---    \n**Parameters**  \n- _streamQuery_  \n    The siddhi query by which the siddhi app runtime is created  \n  \n- _inStreamRefs_  \n    References of the input streams in the forever  \n  \n- _inTableRefs_  \n    References of the input tables in the forever  \n  \n- _outStreamRefs_  \n    References of the output streams in the forever  \n  \n- _outTableRefs_  \n    References of the output tables in the forever  \n  \n- _funcPointers_  \n    References of the functions to invoke as the streaming action  \n"
        }
      },
      "sortText": "120",
      "insertText": "startForever(streamQuery,inStreamRefs,inTableRefs,outStreamRefs,outTableRefs,funcPointers) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "i",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "i {\n\t${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "i",
      "kind": "Variable",
      "detail": "string|int|boolean",
      "sortText": "130",
      "insertText": "i"
    },
    {
      "label": "p",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "p {\n\t${1:{name:\"\", age:0}} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "p",
      "kind": "Variable",
      "detail": "Person",
      "sortText": "130",
      "insertText": "p"
    },
    {
      "label": "http",
      "kind": "Module",
      "detail": "Package",
      "sortText": "150",
      "insertText": "http"
    },
    {
      "label": "var5",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "var5 {\n\t${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var5",
      "kind": "Variable",
      "detail": "string",
      "sortText": "130",
      "insertText": "var5"
    },
    {
      "label": "var4",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "var4 {\n\t${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var4",
      "kind": "Variable",
      "detail": "int",
      "sortText": "130",
      "insertText": "var4"
    },
    {
      "label": "var3",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "var3 {\n\t${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var3",
      "kind": "Variable",
      "detail": "(string,int)|(float,(string,boolean))|(float,(string,(boolean,int)))|float",
      "sortText": "130",
      "insertText": "var3"
    },
    {
      "label": "var2",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "var2 {\n\t${1:(\"\", 0, false)} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var2",
      "kind": "Variable",
      "detail": "(string,int,boolean)",
      "sortText": "130",
      "insertText": "var2"
    },
    {
      "label": "var1",
      "kind": "Variable",
      "detail": "Snippet",
      "sortText": "110",
      "insertText": "var1 {\n\t${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "var1",
      "kind": "Variable",
      "detail": "string|int|boolean",
      "sortText": "130",
      "insertText": "var1"
    }
  ]
}