{
  "position": {
    "line": 7,
    "character": 7
  },
  "source": "function/source/chainCompletion4.bal",
  "items": [
    {
      "label": "shift()((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nRemove and return first element of the array `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "sortText": "130",
      "insertText": "shift(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "remove(int i)((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nRemoves the member of `arr` and index `i` and returns it.\nPanics if `i` is out of range.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _i_  \n    index of member to be removed  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "sortText": "130",
      "insertText": "remove(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "pop()((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nRemove and return the last member of the `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "sortText": "130",
      "insertText": "pop(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns an iterator over the members of `arr`\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \nobject { public function next () returns (record {| $|0 value; |}?); }"
        }
      },
      "sortText": "130",
      "insertText": "iterator(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "removeAll()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nRemoves all members of `arr`.\nPanics if any member cannot be removed.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n"
        }
      },
      "sortText": "130",
      "insertText": "removeAll(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "slice(int startIndex, int endIndex)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns a sub array starting from `startIndex` (inclusive) to `endIndex` (exclusive).\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _startIndex_  \n    index of first member to include in the slice  \n  \n- _endIndex_  \n    index of first member not to include in the slice  \n  \n  \n**Return**  \n(any|error)[]"
        }
      },
      "sortText": "130",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toBase16()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns the string representing `arr` using Base16.\nThe representation is the same as used by a Ballerina Base16Literal.\nThe result will contain only characters  `0..9`, `a..f`.\nThere will be no whitespace in the returned string.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toBase16(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "enumerate()([int,(any|error)][])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns a new array comprising of position and member pairs.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \n[int,(any|error)][]"
        }
      },
      "sortText": "130",
      "insertText": "enumerate(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function ((any|error)) returns ((any|error)) func)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns a new array applying function `func` to each member of array `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _func_  \n    a function to apply to each member  \n  \n  \n**Return**  \n(any|error)[]"
        }
      },
      "sortText": "130",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "indexOf((anydata|error) val, int startIndex)((int|()))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns the index of first member of `arr` that is equal to `val` if there is one.\nReturns `()` if not found\nEquality is tested using `\u003d\u003d`\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _val_  \n    member to search for  \n  \n- _startIndex_  \n    index to start the search from  \n(Default Parameter)  \n  \n**Return**  \nint?"
        }
      },
      "sortText": "130",
      "insertText": "indexOf(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reduce(function ((any|error),(any|error)) returns ((any|error)) func, (any|error) initial)((any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReduce operate on each member of `arr` using combining function `func` to produce\na new value combining all members of `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _func_  \n    combining function  \n  \n- _initial_  \n    initial value to first evaluation of combining function `func`  \n  \n  \n**Return**  \n(any|error)"
        }
      },
      "sortText": "130",
      "insertText": "reduce(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toBase64()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns the string representing `arr` using Base64 encoding.\nThe representation is the same as used by a Ballerina Base64Literal.\nThe result will contain only characters  `A..Z`, `a..z`, `0..9`, `+`, `/` and `\u003d`.\nThere will be no whitespace in the returned string.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toBase64(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "forEach(function ((any|error)) returns () func)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nApply function `func` to each member of array `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _func_  \n    a function to apply to each member  \n"
        }
      },
      "sortText": "130",
      "insertText": "forEach(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns the number of members contained in `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n  \n**Return**  \nint"
        }
      },
      "sortText": "130",
      "insertText": "length(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sort(function ((any|error),(any|error)) returns (int) func)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nSort `arr` using `func` to order members.\nReturns `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _func_  \n    comparator function  \n  \n  \n**Return**  \n(any|error)[]"
        }
      },
      "sortText": "130",
      "insertText": "sort(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reverse()((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReverse the order of the members of `arr`.\nReturns `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array to be reversed  \n  \n  \n**Return**  \n(any|error)[]"
        }
      },
      "sortText": "130",
      "insertText": "reverse(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "push(...(any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nAdd `vals` to end of the `arr` array.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _vals_  \n    values to add to the end of the array  \n"
        }
      },
      "sortText": "130",
      "insertText": "push(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "filter(function ((any|error)) returns (boolean) func)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nReturns a new array constructed from those elements of \u0027arr\u0027 for which `func` returns true.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _func_  \n    a predicate to apply to each element to determine if it should be included  \n  \n  \n**Return**  \n(any|error)[]"
        }
      },
      "sortText": "130",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "setLength(int i)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nIncrease or decrease the length.\n`setLength(arr, 0)` is equivalent to `removeAll(arr)`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _i_  \n    new length  \n"
        }
      },
      "sortText": "130",
      "insertText": "setLength(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a simple, human-readable representation of `value` as a string.\n  \n  \n---    \n**Parameters**  \n- _value_  \n    source value  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "130",
      "insertText": "toString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "unshift(...(any|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array_  \n  \nAdd `vals` to beginig of the array `arr`.\n  \n  \n---    \n**Parameters**  \n- _arr_  \n    the array  \n  \n- _vals_  \n    values to add to the start of the array  \n"
        }
      },
      "sortText": "130",
      "insertText": "unshift(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "ArrayIterator",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represent the iterator type returned when `iterator` method is invoked."
      },
      "sortText": "120",
      "insertText": "ArrayIterator",
      "insertTextFormat": "Snippet"
    }
  ]
}