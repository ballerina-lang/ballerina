<!DOCTYPE html>
<html>

{{> htmlHead title="API Documentation - {{ ../module.id }} Module " rootPath="../" }}

<body>
  <div class="ui grid">
    <div class="navi-wrapper two wide column">
      <div class="navi-wrapper-content">
      <a href="../index.html">
        <img class="logo" src="../images/ballerina-logo.png">
      </a>
      {{> currentModule rootPath="../" }}
      {{> allModules rootPath="../" }}
      </div>
    </div>

    <div class="fourteen wide column content-wrapper">
      <div class="main-wrapper">
      <div class="ui breadcrumb">
        <h1 class="active section">{{module.id}}</h1>
      </div>
      <div class="ui divider"></div>
      <p>This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket
        endpoints. The module facilitates two types of endpoints as ‘Client’ and ‘Listener’.</p>

      <h3>Client endpoints</h3>
      <p><code>Client</code> endpoints are used to connect to and interact with HTTP endpoints. They support connection
        pooling and can be configured to have a maximum number of active connections that can be made with the remote
        endpoint. <code>Client</code> endpoints activate connection eviction after a given idle period and also support
        follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.
        <code>Client</code> endpoints handle resilience in multiple ways such as load balancing, circuit breaking,
        endpoint timeouts, and a retry mechanism.</p>
      <p>Load balancing is used in the round robin or failover manner.<br></p>
      <p>When a failure occurs in the remote service, the <code>Client</code> connections might wait for some time
        before a timeout
        occurs. Awaiting requests consume resources in the system. Circuit Breakers are used to trip after a certain
        number of failed requests to the remote service. Once a circuit breaker trips, it does not allow the client to
        send requests to the remote service for a period of time.<br></p>
      <p>The Ballerina circuit breaker supports tripping on HTTP error status codes and I/O errors. Failure thresholds
        can be configured based on a sliding window (e.g., 5 failures within 10 seconds). <code>Client</code> endpoints
        also support
        a retry mechanism that allows a client to resend failed requests periodically for a given number of times.
        <code>Client</code> endpoints support Certificate Revocation List (CRL), Online Certificate Status Protocol
        (OCSP) and OCSP Stapling for SSL/TLS connection. They also support HTTP2, keep-alive, chunking, HTTP caching,
        and data compression/decompression.<br><br></p>

      <p>See <b><u>Client Endpoint Example</u></b>,
        <b><u>Circuit Breaker Example</u></b>,
        <b><u> HTTP Redirects Example</u></b>
      </p>

      <h3>Listener endpoints</h3>
      <p>
        A Service represents a collection of network-accessible <br>entry points and can be exposed via a
        <code>Listener</code> endpoint.
        A resource represents one such entry point and can have its own path, HTTP methods, body format, 'consumes' and
        'produces' content types, CORS headers, etc. In resources, <code>endpoint</code> and <code>http:Request</code>
        are mandatory parameters
        while <code>path</code> and <code>body</code> are optional.
      </p>
      <p>When a <code>Service</code> receives a request, it is dispatched to the best-matched resource.</p>
      <p>See
        <b><u>Listener Endpoint Example</u></b> ,
        <b><u>HTTP CORS Example</u></b> ,
        <b><u>HTTP Failover Example</u></b> ,
        <b><u>HTTP Load Balancer Example</u></b>
      </p>
      <p>
        <code>Listener</code> endpoints can be exposed via SSL. They support Mutual SSL, Hostname Verification, and
        Server Name
        Indication (SNI) and Application Layer Protocol Negotiation (ALPN). <code>Listener</code> endpoints also support
        Certificate
        Revocation List (CRL), Online Certificate Status Protocol (OCSP), OCSP Stapling, HTTP2, keep-alive, chunking,
        HTTP caching, and data compression/decompression.
      </p>
      <p>See <u><b>Mutual SSL Example.</u></b></p>
      <p> See <u><b> Caching Example</u></b>, <u><b> HTTP Disable Chunking Example.</u></b></p>


      <h3><a name="records">Records</a></h3>
      <div class="ui divider"></div>

      <table>
        {{#if module.constructs}}
        {{#each module.constructs.records}}
        <tr>
          <td class="module-title truncate records" id="{{name}}">
            <a class="records" href="records/{{name}}.html">{{name}}</a></td>
          <td class="module-desc">{{description}}</td>
        </tr>
        {{/each}}
        {{/if}}
      </table>

      <h3><a name="objects">Objects</a></h3>
      <div class="ui divider"></div>

      <table>
        {{#if module.constructs}}
        {{#each module.constructs.objects}}
        <tr>
          <td class="module-title truncate" id="{{name}}"> 
            <a class="objects" href="objects/{{name}}.html">{{name}}</a></td>
          <td class="module-desc">{{description}}</td>
        </tr>
        {{/each}}
        {{/if}}
      </table>

      <h3><a name="clients">Clients</a></h3>
      <div class="ui divider"></div>

      <table>
        {{#if module.constructs}}
        {{#each module.constructs.clients}}
        <tr>
          <td class="module-title truncate clients" id="{{name}}"> 
            <a class="clients" href="clients/{{name}}.html">{{name}}</a></td>
          <td class="module-desc">{{description}}</td>
        </tr>
        {{/each}}
        {{/if}}
      </table>

      <h3><a name="functions">Functions</a></h3>
      <div class="ui divider"></div>

      <table>
        {{#if module.constructs}}
        {{#each module.constructs.functions}}
        <tr>
          <td class="module-title truncate" id="{{name}}"> 
            <a class="functions" href="functions/functions.html">{{name}}</a></td>
          <td class="module-desc">{{description}}</td>
        </tr>
        {{/each}}
        {{/if}}
      </table>

      <h3><a name="constants">Constants</a></h3>
      <div class="ui divider"></div>

      <table>
        {{#if module.constructs}}
        {{#each module.constructs.constants}}
        <tr>
          <td class="module-title truncate constant" id="{{name}}">
            <a class="constant" href="constants/constants.html">{{name}}</a></td>
          <td class="module-desc">{{description}}</td>
        </tr>
        {{/each}}
        {{/if}}
      </table>

      <h3><a name="annotations">Annotations</a></h3>
      <div class="ui divider"></div>

      <table>
        {{#if module.constructs}}
        {{#each module.constructs.annotations}}
        <tr>
          <td class="module-title truncate annotations" id="{{name}}"> 
            <a class="annotations" href="annotations/annotations.html">{{name}}</a></td>
          <td class="module-desc">{{description}}</td>
        </tr>
        {{/each}}
        {{/if}}
      </table>
    </div>
  </div>
</body>
