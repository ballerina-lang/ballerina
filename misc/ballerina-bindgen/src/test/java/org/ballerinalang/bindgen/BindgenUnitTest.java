/*
 *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.ballerinalang.bindgen;

import io.ballerina.compiler.syntax.tree.SyntaxTree;
import org.ballerinalang.bindgen.exceptions.BindgenException;
import org.ballerinalang.bindgen.model.BindingsGenerator;
import org.ballerinalang.bindgen.model.JClass;
import org.ballerinalang.bindgen.utils.BindgenEnv;
import org.ballerinalang.formatter.core.Formatter;
import org.ballerinalang.formatter.core.FormatterException;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Test the Ballerina syntax tree generated by the tool.
 *
 * @since 2.0.0
 */
public class BindgenUnitTest {

    private final Path resourceDirectory = Paths.get("src").resolve("test").resolve("resources").toAbsolutePath();

    @Test()
    public void test() throws FormatterException, ClassNotFoundException, BindgenException, IOException {
        BindgenEnv bindgenEnv = new BindgenEnv();
        bindgenEnv.setDirectJavaClass(true);
        BindingsGenerator bindingsGenerator = new BindingsGenerator(bindgenEnv);

        // Test the constructor functions generated
        Path constructorFilePath = Paths.get(resourceDirectory.toString(), "unit-test-resources", "constructors.bal");
        String constructors = Files.readString(resourceDirectory.resolve(constructorFilePath));
        SyntaxTree cSyntaxTree = bindingsGenerator.generate(new JClass(this.getClass().getClassLoader()
                .loadClass("org.ballerinalang.bindgen.ConstructorsTestResource"), bindgenEnv));
        Assert.assertEquals(Formatter.format(cSyntaxTree.toSourceCode()), Formatter.format(constructors));
        Assert.assertFalse(cSyntaxTree.hasDiagnostics());

        // Test the method functions generated
        Path methodFilePath = Paths.get(resourceDirectory.toString(), "unit-test-resources", "methods.bal");
        String methods = Files.readString(resourceDirectory.resolve(methodFilePath));
        SyntaxTree mSyntaxTree = bindingsGenerator.generate(new JClass(this.getClass().getClassLoader()
                .loadClass("org.ballerinalang.bindgen.MethodsTestResource"), bindgenEnv));
        Assert.assertEquals(Formatter.format(mSyntaxTree.toSourceCode()), Formatter.format(methods));
        Assert.assertFalse(mSyntaxTree.hasDiagnostics());

        // Test the field functions generated
        Path fieldFilePath = Paths.get(resourceDirectory.toString(), "unit-test-resources", "fields.bal");
        String fields = Files.readString(resourceDirectory.resolve(fieldFilePath));
        SyntaxTree fSyntaxTree = bindingsGenerator.generate(new JClass(this.getClass().getClassLoader()
                .loadClass("org.ballerinalang.bindgen.FieldsTestResource"), bindgenEnv));
        Assert.assertEquals(Formatter.format(fSyntaxTree.toSourceCode()), Formatter.format(fields));
        Assert.assertFalse(fSyntaxTree.hasDiagnostics());
    }
}
