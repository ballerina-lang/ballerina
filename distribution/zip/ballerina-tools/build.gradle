plugins {
    id 'base'
}

apply from: "$rootDir/gradle/repositories.gradle"

configurations {
    dist {
      transitive false
    }
    distBal {
        transitive false
    }
    tools {
        transitive false
    }
    toolsZip {
        transitive false
    }
    ballerinaZip {
        transitive false
    }
    docerina
    bin
    balSource
}

dependencies {
    dist 'org.bytedeco.javacpp-presets:llvm-platform:6.0.1-1.4.2'
    dist 'org.bytedeco.javacpp-presets:llvm:6.0.1-1.4.2'
    dist 'org.bytedeco:javacpp:1.4.2'
    dist 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    dist 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    dist 'com.fasterxml.jackson.core:jackson-annotations:2.8.0'
    dist 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.8'

    dist project(':ballerina-cli-utils')
    dist project(':ballerina-llvm')

    dist project(':testerina:testerina-core')
    
    dist project(':swagger-ballerina:swagger-to-ballerina-generator')
    dist project(':ballerina-backend-llvm')
    dist project(':language-server:language-server-compiler');
    dist project(':ballerina-packerina');
    dist project(':protobuf-ballerina')
    dist project(':swagger-ballerina:swagger-to-ballerina-generator');
    docerina project(':docerina-gradle-plugin');

    toolsZip project(path: ':language-server:language-server-core', configuration: 'dist');
    tools project(':language-server:language-server-stdio-launcher');
    tools project(':language-server:language-server-core');
    balSource project(path: ':ballerina', configuration: 'source');
    distBal project(path: ':ballerina', configuration: 'balo');
    dist project(path: ':ballerina', configuration: 'jar');
    bin project(path: ':ballerina', configuration: 'bin');
}

def basePath = '/' + project.name + '-' + project.version + '/'

CopySpec copyJarSpec = copySpec {
    from configurations.dist
    into(basePath + 'bre/lib')
}

CopySpec copyBaloSpec = copySpec {
    from configurations.distBal
    into(basePath + 'lib')
}

CopySpec copyBinSpec = copySpec {
    from configurations.bin
    filter { line -> line.replace('${project.version}', "$project.version") }
    into(basePath + 'bin')
}

CopySpec copyToolsBin = copySpec {
    from ('resources')
    into(basePath + 'lib/tools/lang-server/launcher')
}

CopySpec copyToolsZipSpec = copySpec {
    configurations.toolsZip.asFileTree.each {
        from(zipTree(it))
    }
    into(basePath + 'lib/tools/lang-server')
}

CopySpec copyBallerinaZipSpec = copySpec {
    configurations.ballerinaZip.asFileTree.each {
        from(zipTree(it))  { includeEmptyDirs false }
	    eachFile { f ->
			f.path = f.path.replaceFirst("ballerina-${project.version}/", '')
        }
    }
    into(basePath)
}

CopySpec copyToolsSpec = copySpec {
    from configurations.tools
    into(basePath + 'lib/tools/lang-server/lib')
}

CopySpec examplesSpec = copySpec {
    from fileTree(project.rootDir.path + '/examples');
    into(basePath + '/examples')
}

task extractLibs(type: Copy) {
    def path = "$buildDir/ballerina";
    from configurations.balSource.files
    into path
}

task generateDocs(type: JavaExec) {
    dependsOn extractLibs
    inputs.dir("$buildDir/ballerina/");
    outputs.dir("$buildDir/api-docs")

    systemProperty("BALLERINA_DEV_COMPILE_BALLERINA_ORG", true)
    systemProperty("BALLERINA_DEV_LOAD_BUILTIN_FROM_SOURCE", true)

    classpath = configurations.docerina
    main = 'org.ballerinalang.plugin.gradle.doc.DocerinaGen'

    def libs = "$buildDir/ballerina/"
    args("$libs", "$buildDir/api-docs")
}

CopySpec apiDocsSpec = copySpec {
    from generateDocs.outputs.files
    into("$basePath/docs")
}

task createApiDocsZip(type: Zip) {
    from generateDocs.outputs.files
    archiveName "ballerina-api-docs-${project.version}.zip"
}

task createZip(type: Zip) {
    with copyJarSpec
    with copyBaloSpec
    with copyBinSpec
    with copyToolsSpec
    with copyToolsZipSpec
    with copyToolsBin
    with copyBallerinaZipSpec
    with examplesSpec
    with apiDocsSpec
}

build {
    dependsOn createZip
}

// This section makes sure that checkstyle/spotbug runs when dist is build.
project.afterEvaluate {
    configurations.dist.dependencies
        .findAll { it instanceof ProjectDependency }
        .each {
            it.dependencyProject.afterEvaluate {
                def dependencyCheck = it.tasks.find { it.name == 'check' }
                check.dependsOn dependencyCheck
            }
        }
}
