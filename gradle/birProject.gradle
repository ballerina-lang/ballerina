import org.gradle.internal.os.OperatingSystem;

apply from: "$rootDir/gradle/birTestableProject.gradle"

project.ext.modules = files(file('src/main/ballerina').listFiles()).filter { File f ->
    f.isDirectory() && f.getName() != 'target' && f.getName() != '.ballerina'
}

task copyExternalMappingNextToBir(type: Copy) {
    dependsOn compileJava

    project.ext.modules.each { File module ->
        from "$buildDir/classes/java/main/META-INF/this.map.json"
        into "$buildDir/generated-bir/ballerina/" + module.getName() + "/0.0.0/"
        rename { module.getName() + ".map.json" }
    }
}

task createBir {
    dependsOn createBalo

    doLast {
        project.ext.modules.each { File module ->
            def generatedBirDir = "$buildDir/generated-bir/ballerina/" + module.getName() + "/0.0.0/"
            copy {
                def zipFile = zipTree("$buildDir/generated-balo/repo/" + project.ext.orgName + "/" + module.getName() + "/0.0.0/" + module.getName() + ".zip").matching {
                    include "**/*.bir"
                }.files
                from zipFile
                into generatedBirDir
            }
        }
    }

    inputs.dir "$buildDir/generated-balo/repo/" + project.ext.orgName
    outputs.dir "$buildDir/generated-bir"
}

task createBirAndMappings {
    dependsOn createBir
    dependsOn copyExternalMappingNextToBir
}

task createBirJar() {
    dependsOn configurations.birJarCompile
    dependsOn configurations.bir
    dependsOn createBir
    dependsOn createBirCache
    dependsOn copyExternalMappingNextToBir


    doFirst {

        project.ext.modules.each { File module ->
            def generatedBirDir = "$buildDir/generated-bir/" + project.ext.orgName + "/" + module.getName() + "/0.0.0/"
            if (file(generatedBirDir + module.getName() + '.bir').exists()) {
                def mapPath = generatedBirDir + module.getName() + '.map.json'
                // create empty map file even it does not exists
                if (!file(mapPath).exists()) {
                    mapPath = OperatingSystem.current().isWindows() ? "\"\"" : ""
                }

                configurations.birJarCompile.each {
                    def pack3 = it
                    if (OperatingSystem.current().isWindows()) {
                        exec {
                            workingDir "$buildDir/generated-bir-jar"
                            commandLine 'cmd.exe', '/c',
                                        new File(pack3, '/bin/ballerina.bat'), 'run', new File(pack3, '/bin/compiler_backend_jvm.balx'),
                                        generatedBirDir + module.getName() + '.bir',
                                        mapPath,
                                        "$buildDir/generated-bir-jar/" + module.getName() + ".jar",
                                        'false',
                                        "$buildDir/bir-cache"
                        }
                    } else {
                        exec {
                            workingDir "$buildDir/generated-bir-jar"
                            commandLine 'sh',
                                        new File(pack3, '/bin/ballerina'), 'run', new File(pack3, '/bin/compiler_backend_jvm.balx'),
                                        generatedBirDir + module.getName() + '.bir',
                                        mapPath,
                                        "$buildDir/generated-bir-jar/" + module.getName() + ".jar",
                                        'false',
                                        "$buildDir/bir-cache"
                        }
                    }
                }
            }
        }
    }

    inputs.files configurations.bir
    inputs.files configurations.birJarCompile
    inputs.dir "$buildDir/generated-bir"
    outputs.dir "$buildDir/generated-bir-jar"
    outputs.cacheIf { true }
}

task copySelfToBirCache(type: Copy) {
    dependsOn createBirAndMappings
    from "$buildDir/generated-bir"
    into "$buildDir/bir-cache"
}

test {
    dependsOn copySelfToBirCache
    dependsOn createBirJar

    project.ext.modules.each { File module ->
        classpath += files("$buildDir/generated-bir-jar/" + module.name + ".jar")
    }
}


artifacts {
    bir file("$buildDir/generated-bir/"), { builtBy(createBirAndMappings) }
    birJar file("$buildDir/generated-bir-jar/"), { builtBy(createBirJar) }
}
