import org.gradle.internal.os.OperatingSystem;

apply from: "$rootDir/gradle/birTestableProject.gradle"

project.ext.modules = files(file('src/main/ballerina').listFiles()).filter { File f ->
    f.isDirectory() && f.name != 'target' && f.name != '.ballerina'
}

task copyExternalMappingNextToBir(type: Copy) {
    dependsOn compileJava

    project.ext.modules.each { File module ->
        from "$buildDir/classes/java/main/META-INF/this.map.json"
        into "$buildDir/generated-bir/ballerina/" + module.name + "/0.0.0/"
        rename { module.name + ".map.json" }
    }
}

task createBir {
    dependsOn createBalo

    project.ext.modules.each { File module ->
        def generatedBirDir = "$buildDir/generated-bir/ballerina/" + module.name + "/0.0.0/"
        doLast {
            copy {
                def zipFile = zipTree("$buildDir/generated-balo/repo/ballerina/" + module.name + "/0.0.0/" + module.name + ".zip").matching {
                    include "**/*.bir"
                }.files
                from zipFile
                into generatedBirDir
            }
        }

        inputs.file "$buildDir/generated-balo/repo/ballerina/" + module.name + "/0.0.0/" + module.name + ".zip"
        outputs.dir "$buildDir/generated-bir"
    }
}

task createBirAndMappings {
    dependsOn createBir
    dependsOn copyExternalMappingNextToBir
}


task createBirJar(type: Exec) {
    dependsOn configurations.birJarCompile
    dependsOn configurations.bir
    dependsOn createBir
    dependsOn createBirCache
    dependsOn copyExternalMappingNextToBir
    
    workingDir "$buildDir/generated-bir-jar"

    project.ext.modules.each { File module ->
        def generatedBirDir = "$buildDir/generated-bir/ballerina/" + module.name + "/0.0.0/"

        onlyIf { file(generatedBirDir + module.name + '.bir').exists() }

        doFirst {
            def mapPath = OperatingSystem.current().isWindows() ? "\"\"" : ""
            if (!sourceSets.main.allJava.isEmpty()) {
                mapPath = generatedBirDir + module.name + '.map.json'
            }

            configurations.birJarCompile.each {
                if (OperatingSystem.current().isWindows()) {
                    commandLine 'cmd.exe', '/c',

                                new File(it, '/bin/ballerina.bat'), 'run', new File(it, '/bin/compiler_backend_jvm.balx'),

                                generatedBirDir + module.name + '.bir',
                                mapPath,
                                "$buildDir/generated-bir-jar/" + module.name+ ".jar",
                                'false',
                                "$buildDir/bir-cache"
                } else {
                    commandLine 'sh',

                                new File(it, '/bin/ballerina'), 'run', new File(it, '/bin/compiler_backend_jvm.balx'),

                                generatedBirDir + module.name + '.bir',
                                mapPath,
                                "$buildDir/generated-bir-jar/" + module.name + ".jar",
                                'false',
                                "$buildDir/bir-cache"
                }
            }
        }

        inputs.files configurations.bir
        inputs.files configurations.birJarCompile
        inputs.dir "$buildDir/generated-bir"
        outputs.dir "$buildDir/generated-bir-jar"
        outputs.cacheIf { true }
    }
}

task copySelfToBirCache(type: Copy) {
    dependsOn createBirAndMappings
    from "$buildDir/generated-bir"
    into "$buildDir/bir-cache"
}

test {
    dependsOn copySelfToBirCache
    dependsOn createBirJar

    project.ext.modules.each { File module ->
        classpath += files("$buildDir/generated-bir-jar/" + module.name + ".jar")
    }
}



artifacts {
    bir file("$buildDir/generated-bir/"), { builtBy(createBirAndMappings) }
    birJar file("$buildDir/generated-bir-jar/"), { builtBy(createBirJar) }
}
